{"version":3,"sources":["../src/process_ctrl.js"],"names":["angular","_","$","appEvents","kbn","config","TimeSeries","PanelCtrl","MetricsPanelCtrl","alertTab","QueryCtrl","ChartViewModel","moment","panelDefaults","deleteKeyCode","ctrlKeyCode","ctrlDown","aKeyCode","escKeyCode","nextNodeID","bgColor","thresholds","colors","Name","chartDataModel","nodes","ProcessLineCtrl","$scope","$injector","$window","defaults","panel","CompanyName","events","on","onInitEditMode","bind","chartModel","document","addEditorTab","onDataReceived","onDataError","unitFormats","getUnitFormats","time","data","nodeName","prompt","newNodeDataModel","name","id","x","y","Data","addNode","dataList","series","map","seriesHandler","setValues","console","log","updateNode","render","seriesData","datapoints","alias","target","unit","flotpairs","getFlotPairs","nullPointMode","length","i","seriesItem","debug","applyOverrides","lastPoint","last","lastValue","isArray","valueName","value","valueRounded","valueFormated","isString","escape","seriesItemAlias","colorData","overrides","info","nodeData","nodeDetails","singleName","metricsNodeName","pop","push","nodename","node","nodeDelete","index","findIndex","o","splice","templateUrl"],"mappings":"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","file":"process_ctrl.js","sourcesContent":["import angular from 'angular';\nimport _ from 'lodash';\nimport $ from 'jquery';\nimport appEvents from 'app/core/app_events';\n//import coreModule from '../../core/core_module';\nimport kbn from 'app/core/utils/kbn';\nimport config from 'app/core/config';\nimport TimeSeries from 'app/core/time_series2';\n//import 'public/plugins/grafana-processline-panel/css/style1.css'\nimport {PanelCtrl} from 'app/plugins/sdk';\nimport {MetricsPanelCtrl, alertTab} from 'app/plugins/sdk';\nimport {QueryCtrl} from 'app/features/panel/query_ctrl';\nimport {ChartViewModel} from './flowchart/ChartViewModel';\nimport moment from 'moment';\n//import {Draggable} from './dragging_service';\nimport './mydirective';\nimport  './drag_drop';\nimport './node-directive'\n//import {top,left} from './drag_drop';\nconst panelDefaults = {\n      deleteKeyCode: '46',\n      ctrlKeyCode: '17',\n      ctrlDown: false,\n      aKeyCode:'65',\n      escKeyCode:'27',\n      nextNodeID:'10',\n      bgColor: null,\n      thresholds: '0,10',\n      colors: ['rgba(50, 172, 45, 1)', 'rgba(241, 255, 0, 1)', 'rgba(245, 54, 54, 1)'],\n      Name:'Node',\n      chartDataModel: {\n        nodes:[\n\n\n\n        ]\n\n      },\n    };\nexport class ProcessLineCtrl extends MetricsPanelCtrl {\n  constructor($scope, $injector,$window) {\n   super($scope, $injector,$window);\n   this.$scope=$scope;\n   _.defaults(this.panel, panelDefaults);\n    this.CompanyName = \"Process Line Montoring\";\n\n    this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n    //this.events.on('init-edit-mode', this.updateClock.bind(this));\n    this.chartModel=new ChartViewModel(this.panel.chartDataModel)\n    //this.updateClock();\n   // this.update();\n    this.document=document;\n\n }\n onInitEditMode() {\n    // this.addEditorTab('Metrics', 'public/plugins/grafana-processline-panel/metrics.html');\n     this.addEditorTab('Node Options', 'public/plugins/grafana-processline-panel/editor.html', 3);\n     this.events.on('data-received', this.onDataReceived.bind(this));\n     this.events.on('data-error', this.onDataError.bind(this));\n     this.unitFormats = kbn.getUnitFormats();\n   }\n\n\n  updateClock() {\n       this.time=10;\n     //var e1=document.getElementById(\"shape\");\n     //this.align = e1.getAttribute(\"nodeX\");\n     }\n\n   addNewNode(data) {\n\n   \t\tvar nodeName = prompt(\"Enter a node name:\", \"New node\");\n   \t\tif (!nodeName) {\n   \t\t\treturn;\n   \t\t}\n\n   \t\t//\n   \t\t// Template for a new node.\n   \t\t//\n   \t\tvar newNodeDataModel = {\n   \t\t\tname: nodeName,\n   \t\t\tid: this.panel.nextNodeID++,\n   \t\t\tx: 0,\n   \t\t\ty: 0,\n   \t\t\tData: [\n\n\n   \t\t\t]\n\n   \t\t};\n\n        //newNodeDataModel.Data.push(data)\n   \t\tthis.chartModel.addNode(newNodeDataModel);\n   \t\treturn 0;\n   \t};\n\n\n\n\n\n     onDataReceived(dataList) {\n         this.series = dataList.map(this.seriesHandler.bind(this));\n         var data={};\n         this.setValues(data);\n        this.data=data;\n         console.log(this.data);\n         this.updateNode(this.data);\n         this.render();\n     }\n\n     seriesHandler(seriesData) {\n\n         var series = new TimeSeries({\n           datapoints: seriesData.datapoints,\n           alias: seriesData.target,\n           unit: false,\n         });\n         series.flotpairs = series.getFlotPairs(this.panel.nullPointMode);\n\n         return series;\n     }\n     setValues(data){\n     if (this.series && this.series.length > 0) {\n     \t\t\tfor(var i = 0; i < this.series.length; i++){\n     \t\t\t\tvar seriesItem = this.series[i];\n     \t\t\t\tconsole.debug('setting values for series');\n     \t\t\t\tconsole.debug(seriesItem);\n     \t\t\t\tdata[seriesItem.alias] = this.applyOverrides(seriesItem.alias);\n     \t\t\t\tvar lastPoint = _.last(seriesItem.datapoints);\n     \t\t\t    var lastValue = _.isArray(lastPoint) ? lastPoint[0] : null;\n     \t\t\tconsole.log(lastPoint);\n     \t\t\tconsole.log(lastValue);\n     \t\t\tif (this.panel.valueName === 'name') {\n                \t\t\t\t\tdata[seriesItem.alias].value = 0;\n                \t\t\t        data[seriesItem.alias].valueRounded = lastValue;\n                \t\t\t        data[seriesItem.alias].valueFormated = seriesItem.alias;\n                \t\t\t\t} else if (_.isString(lastValue)) {\n                \t\t\t        data[seriesItem.alias].value = lastValue;\n                \t\t\t        data[seriesItem.alias].valueFormated = _.escape(lastValue);\n                \t\t\t        data[seriesItem.alias].valueRounded = 0;\n                \t\t\t\t} else {\n                \t\t\t\t\tdata[seriesItem.alias].value = lastValue;\n                \t\t\t        //data[seriesItem.alias].flotpairs = seriesItem.flotpairs;\n\n\n                \t\t\t\t}\n\n     }\n     }\n     }\n     applyOverrides(seriesItemAlias){\n     var seriesItem = {}, colorData = {}, overrides = {};\n     \t\tconsole.info('applying overrides for seriesItem');\n     \t\tconsole.debug(seriesItemAlias);\n     \t\tconsole.debug(this.panel.chartDataModel.nodes);\n     \t\tfor(var i=0; i<=this.panel.chartDataModel.nodes.length; i++){\n     \t\t\tconsole.debug('comparing:');\n     \t\t\tconsole.debug(this.panel.chartDataModel.nodes[i]);\n     \t\t\tif (this.panel.chartDataModel.nodes[i] && this.panel.chartDataModel.nodes[i].alias == seriesItemAlias){\n     \t\t\t\toverrides = this.panel.chartDataModel.nodes[i];\n     \t\t\t}\n     \t\t}\n\n\n     \t\tseriesItem.Name = overrides.Name || this.panel.Name;\n\n     \t\treturn seriesItem;\n\n\n     }\n/*\n     setValues(){\n     var data={};\n\n     var id1=this.series[0].datapoints;\n     var len = id1.length;\n\n\n        for(var i = 0; i<=len; i++)\n       {\n            for(var key in id1[i])\n            {\n\n                if(key==0){\n               console.log(id1[i][key]);\n               var ElaspedTime=id1[i][key];\n               this.addNewNode(ElaspedTime);\n               console.log(data.ElaspedTime)\n               //console.log(key);\n                     }\n            }\n\n       }\n\n\n     }\n*/\nupdateNode(nodeData){\n\nconsole.log(nodeData);\n\n\n\n\nfor(var i=0;i<=this.panel.chartDataModel.nodes.length;i++){\nvar nodeDetails=this.panel.chartDataModel.nodes;\n\nfor(var singleName of nodeDetails){\n if(singleName.name==this.metricsNodeName){\n\n    singleName.Data.pop();\n\n singleName.Data.push(nodeData);\n console.log(this.panel.chartDataModel.nodes);\n\n }\n\n}\n\n}\n\n\n}\n   UpdateNodeMetrics(nodename){\n\n   this.metricsNodeName=nodename;\n\n   console.log(this.metricsNodeName);\n\n\n   }\n\n\n    DeleteNode(node){\n    var nodeDelete=this.panel.chartDataModel.nodes;\n    //for(var i=0;i<=nodeDelete.length;i++){\n\n    var index = nodeDelete.findIndex(function(o){\n     return o.name === node;\n     console.log(index);\n    })\n    nodeDelete.splice(index, 1);\n}\n\n}\n\nProcessLineCtrl.templateUrl = 'module.html';"]}