{"version":3,"sources":["../../src/flowchart/flowchart.js"],"names":["FlowChart","defaultNodeWidth","nodeNameHeight","connectorHeight","connectorIndex","node","inputConnector","x","width","y","computeConnectorY","connectorDataModel","parentNode","data","_parentNode","_x","_y","name","connectorDataModels","viewModels","i","length","connectorViewModel","ConnectorViewModel","push"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;wBACaA,S;AACZ,yBAAa;AAAA;;AACZ,UAAKC,gBAAL,GAAsB,GAAtB;AACA,UAAKC,cAAL,GAAoB,EAApB;AACA,UAAKC,eAAL,GAAqB,EAArB;AACA;;;;uCAGgBC,c,EAAgB;AAChC,aAAO,KAAKF,cAAL,GAAuBE,iBAAiB,KAAKD,eAApD;AACA;;;yCAKmBE,I,EAAMD,c,EAAgBE,c,EAAgB;AACzD,aAAO;AACNC,UAAGF,KAAKE,CAAL,MAAYD,iBAAiB,CAAjB,GAAqBD,KAAKG,KAAL,GAAaH,KAAKG,KAAL,EAAb,GAA4B,KAAKP,gBAAlE,CADG;AAENQ,UAAGJ,KAAKI,CAAL,KAAW,KAAKC,iBAAL,CAAuBN,cAAvB;AAFR,OAAP;AAIA;;;wCAKkBO,kB,EAAoBJ,C,EAAGE,C,EAAGG,U,EAAY;;AAExD,WAAKC,IAAL,GAAYF,kBAAZ;AACA,WAAKG,WAAL,GAAmBF,UAAnB;AACA,WAAKG,EAAL,GAAUR,CAAV;AACA,WAAKS,EAAL,GAAUP,CAAV;;AAEA;AACA;AACA;AACA,WAAKQ,IAAL,GAAU,KAAKJ,IAAL,CAAUI,IAApB;;AAGA;AACA;AACA;;;;;;;;;;;AAYA;AACA;AACA;;AAGA;;;+CAIyBC,mB,EAAqBX,C,EAAGK,U,EAAY;AAC7D,UAAIO,aAAa,EAAjB;;AAEA,UAAID,mBAAJ,EAAyB;AACxB,YAAK,IAAIE,IAAI,CAAb,EAAgBA,IAAIF,oBAAoBG,MAAxC,EAAgD,EAAED,CAAlD,EAAqD;AACpD,YAAIE,qBAAoB,KAAKC,kBAAL,CAAwBL,oBAAoBE,CAApB,CAAxB,EAAgDb,CAAhD,EAAmD,KAAKG,iBAAL,CAAuBU,CAAvB,CAAnD,EAA8ER,UAA9E,CAAxB;AACAO,mBAAWK,IAAX,CAAgBF,kBAAhB;AACA;AACD;;AAED,aAAOH,UAAP;AACA","file":"flowchart.js","sourcesContent":["\nexport class FlowChart{\n constructor(){\n  this.defaultNodeWidth=250;\n  this.nodeNameHeight=40;\n  this.connectorHeight=35;\n }\n\n\ncomputeConnectorY(connectorIndex) {\n\t\treturn this.nodeNameHeight + (connectorIndex * this.connectorHeight);\n\t}\n\n\t//\n\t// Compute the position of a connector in the graph.\n\t//\n\tcomputeConnectorPos(node, connectorIndex, inputConnector) {\n\t\treturn {\n\t\t\tx: node.x() + (inputConnector ? 0 : node.width ? node.width() : this.defaultNodeWidth),\n\t\t\ty: node.y() + this.computeConnectorY(connectorIndex),\n\t\t};\n\t};\n\n\t//\n\t// View model for a connector.\n\t//\n\tConnectorViewModel(connectorDataModel, x, y, parentNode) {\n\n\t\tthis.data = connectorDataModel;\n\t\tthis._parentNode = parentNode;\n\t\tthis._x = x;\n\t\tthis._y = y;\n\n\t\t//\n\t\t// The name of the connector.\n\t\t//\n\t\tthis.name=this.data.name;\n\n\n\t\t//\n\t\t// X coordinate of the connector.\n\t\t/*//\n\t\tx() {\n\t\t\treturn this._x;\n\t\t};\n\n\t\t//\n\t\t// Y coordinate of the connector.\n\t\t//\n\t\ty() {\n\t\t\treturn this._y;\n\t\t};\n*/\n\t\t//\n\t\t// The parent node that the connector is attached to.\n\t\t//\n\n\n\t};\n\n\t//\n\t// Create view model for a list of data models.\n\tcreateConnectorsViewModel(connectorDataModels, x, parentNode) {\n\t\tvar viewModels = [];\n\n\t\tif (connectorDataModels) {\n\t\t\tfor (var i = 0; i < connectorDataModels.length; ++i) {\n\t\t\t\tvar connectorViewModel =this.ConnectorViewModel(connectorDataModels[i], x, this.computeConnectorY(i), parentNode);\n\t\t\t\tviewModels.push(connectorViewModel);\n\t\t\t}\n\t\t}\n\n\t\treturn viewModels;\n\t};\n\n\n}\n"]}